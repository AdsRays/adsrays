name: Deploy legacy-ui to Vercel
on:
  push: { branches: [ legacy-ui-build ] }
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '18' }   # старый CRA стабильнее на Node 18

      - name: Ensure jq
        run: sudo apt-get update -y && sudo apt-get install -y jq

      - name: Show project.json
        run: |
          test -s .vercel/project.json || (echo "No .vercel/project.json" && exit 1)
          cat .vercel/project.json

      - name: Export IDs from project.json
        run: |
          echo "VERCEL_ORG_ID=$(jq -r '.orgId' .vercel/project.json)" >> $GITHUB_ENV
          echo "VERCEL_PROJECT_ID=$(jq -r '.projectId' .vercel/project.json)" >> $GITHUB_ENV

      - name: Install deps
        run: npm ci || npm i --legacy-peer-deps --no-audit --no-fund

      - name: vercel pull (prod)
        run: npx -y vercel@latest pull --yes --environment=production --debug --token "$VERCEL_TOKEN"

      - name: vercel build
        env:
          NODE_OPTIONS: --openssl-legacy-provider
        run: npx -y vercel@latest build --token "$VERCEL_TOKEN"

      - name: vercel deploy (prebuilt)
        id: prebuilt
        continue-on-error: true
        run: |
          set -o pipefail
          npx -y vercel@latest deploy --prebuilt --prod --debug --token "$VERCEL_TOKEN" 2>&1 | tee deploy.log || true
          URL="$(sed -n 's/.*[Pp]roduction:[[:space:]]*\\(https[^ ]*\\).*/\\1/p' deploy.log | tail -1 || true)"
          [ -z "$URL" ] && URL="$(tail -n 200 deploy.log | grep -Eo 'https://[^ ]+' | grep -vE 'vercel\\.com|/inspect' | tail -1 || true)"
          echo "URL=$URL" >> "$GITHUB_OUTPUT"

      - name: Fallback deploy (remote build)
        id: fallback
        if: steps.prebuilt.outcome == 'failure'
        run: |
          set -o pipefail
          npx -y vercel@latest deploy --prod --yes --debug --token "$VERCEL_TOKEN" 2>&1 | tee deploy_fallback.log || true
          URL="$(sed -n 's/.*[Pp]roduction:[[:space:]]*\\(https[^ ]*\\).*/\\1/p' deploy_fallback.log | tail -1 || true)"
          [ -z "$URL" ] && URL="$(tail -n 200 deploy_fallback.log | grep -Eo 'https://[^ ]+' | grep -vE 'vercel\\.com|/inspect' | tail -1 || true)"
          echo "URL=$URL" >> "$GITHUB_OUTPUT"

      - name: Publish Production URL
        if: always()
        env:
          PRE: ${{ steps.prebuilt.outputs.URL }}
          FALL: ${{ steps.fallback.outputs.URL }}
        run: |
          URL="$PRE"; [ -z "$URL" ] && URL="$FALL"
          if [ -z "$URL" ]; then
            for f in deploy.log deploy_fallback.log; do
              [ -f "$f" ] || continue
              URL="$(sed -n 's/.*[Pp]roduction:[[:space:]]*\\(https[^ ]*\\).*/\\1/p' "$f" | tail -1 || true)"
              [ -n "$URL" ] || URL="$(grep -Eo 'https://[^ ]+' "$f" | grep -vE 'vercel\\.com|/inspect' | tail -1 || true)"
              [ -n "$URL" ] && break
            done
          fi
          if [ -n "$URL" ]; then
            echo "Production: $URL" | tee -a "$GITHUB_STEP_SUMMARY"
            echo "$URL"
          else
            echo "No Production URL found" >&2
            tail -n 120 deploy.log || true
            tail -n 120 deploy_fallback.log || true
            exit 1
          fi
